// Notes
// Chapter5 Higher-order Functions
function repeat(n, action) {
    for(let i = 0; i < n; i++) {
        action(i);
    }
}

let labels = [];
repeat(5, i => {
    labels.push(`Unit ${i + 1}`);
});

// Functions that create new functions
function greaterThan(n) {
    return m => m > n;
}

let greaterThan10 = greaterThan(10);
console.log(greaterThan10(11));

// Functions that change other functions
function noisy(f) {
    return (...args) => {
        console.log('calling with', args);
        let result = f(...args);
        console.log('called with', args, ', returned', result);
        return result;
    };
}

noisy(Math.min)(3, 2, 1);
// calling with [ 3, 2, 1 ]
// called with [ 3, 2, 1 ] , returned 1
// 1

// Functions that provide new types of control flow
function unless(test, then) {
    if(!test) then();
}

repeat(3, n => {
    unless(n % 2 == 1, () => {
        console.log(n, 'is even');
    });
});

// 0 'is even'
// 2 'is even'

/*****
SCRIPTS DATA SET
*****/

// Example filter
function filter(array, test) {
    let passed = [];
    for(let element of array) {
        if(test(element)) {
            passed.push(element);
        }
    }
    return passed;
}

console.log(filter(SCRIPTS, script => script.living));
console.log(SCRIPTS.filter(s => s.direction == 'ttb'));

// Example map
function map(array, transform) {
    let mapped = [];
    for(let element of array) {
        mapped.push(transform(element));
    }
    return mapped;
}

let rtlScripts = SCRIPTS.filter(s => s.direction == 'rtl');
console.log(map(rtlScripts, s => s.name));

[ 'Adlam',
  'Arabic',
  'Imperial Aramaic',
  'Avestan',
  'Cypriot',
  'Hatran',
  'Hebrew',
  'Old Hungarian',
  'Kharoshthi',
  'Lydian',
  'Mandaic',
  'Manichaean',
  'Mende Kikakui',
  'Meroitic Cursive',
  'Meroitic Hieroglyphs',
  'Old North Arabian',
  'Nabataean',
  'Nko',
  'Old Turkic',
  'Palmyrene',
  'Inscriptional Pahlavi',
  'Psalter Pahlavi',
  'Phoenician',
  'Inscriptional Parthian',
  'Samaritan',
  'Old South Arabian',
  'Syriac',
  'Thaana' ]

// Example reduce
function reduce(array, combine, start) {
    let current = start;
    for(let element of array) {
        current = combine(current, element);
    }
    return current;
}
console.log(reduce([1, 2, 3, 4], (a, b) => a + b, 0));
// 10

// To use reduce twice to find the script with the most characters, we can write:
function characterCount(script) {
    return script.ranges.reduce((count, [from, to]) => {
        return count + (to - from);
    }, 0);
}

console.log(SCRIPTS.reduce((a, b) => {
    return characterCount(a) < characterCount(b) ? b : a;
}));

// Find the average year of origin for living and dead scripts
function average(array) {
    return array.reduce((a, b) => a + b) / array.length;
}

console.log(Math.round(average(
    SCRIPTS.filter(s => s.living).map(s => s.year))));
console.log(Math.round(average(
    SCRIPTS.filter(s => !s.living).map(s => s.year))));

// Strings and character codes
function characterScript(code) {
    for(let script of SCRIPTS) {
        if(script.ranges.some(([from, to]) => {
            return code >= from && code < to;
        })) {
            return script;
        }
    }
    return null;
}

console.log(characterScript(121));
